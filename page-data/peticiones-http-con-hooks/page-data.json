{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/peticiones-http-con-hooks/","webpackCompilationHash":"6429a68cddf917cba916","result":{"data":{"site":{"siteMetadata":{"title":"Este es un Hotfix!","author":"Veronica Clavijo"}},"markdownRemark":{"id":"b691ea93-463b-5e5a-ac4b-3fbd4a3cd425","excerpt":"Lo nuevo de la versión 16.8 de React son los llamados “Hooks” que, entre otras cosas, permiten compartir lógica entre componentes y principalmente añadir estado…","html":"<p>Lo nuevo de la versión <a href=\"https://es.reactjs.org/blog/2019/02/06/react-v16.8.0.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">16.8 de React</a> son los llamados “Hooks” que, entre otras cosas, permiten compartir lógica entre componentes y principalmente añadir estado local a componentes funcionales.</p>\n<p>Como estoy acostumbrada a los componentes de clase, a un inicio los hooks pueden resultar un poco confusos. La pregunta que quiero responder con este post es ¿cómo se hacen peticiones HTTP utilizando React Hooks?. Y en lo posible llegar a un enfoque que sea reutilizable para la mayoría de casos posibles. :)</p>\n<h2 id=\"los-multiples-usos-de-code-classlanguage-textuseeffectcode\"><a href=\"#los-multiples-usos-de-code-classlanguage-textuseeffectcode\" aria-label=\"los multiples usos de code classlanguage textuseeffectcode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Los multiples usos de <code class=\"language-text\">useEffect()</code></h2>\n<p>De acuerdo a la documentación de React, el hook <code class=\"language-text\">useEffect</code> puede ser utilizado en sustitución a todos los métodos de ciclo de vida de los componentes de clase (<code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code>, etc). Esto es porque de acuerdo al diseño de este hook, pasando diferentes parametros o solo uno, o retornando o no una función se puede “simular” el comportamiento de los metodos de ciclo de vida ya mencionados.</p>\n<p>Esa es la primera pista, normalmente en componentes de clase el método en el que se realizan las peticiones HTTP es <code class=\"language-text\">componentDidMount</code>, de esta manera la petición se ejecuta solo una vez cuando el componente se monta por primera vez. <a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ver detalles del ciclo de vida aqui</a>.</p>\n<h3 id=\"code-classlanguage-textuseeffectcode-tomando-el-lugar-de-code-classlanguage-textcomponentdidmountcode\"><a href=\"#code-classlanguage-textuseeffectcode-tomando-el-lugar-de-code-classlanguage-textcomponentdidmountcode\" aria-label=\"code classlanguage textuseeffectcode tomando el lugar de code classlanguage textcomponentdidmountcode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">useEffect()</code> tomando el lugar de <code class=\"language-text\">componentDidMount()</code></h3>\n<p>Ya he mencionado que, pasando ciertos parámetros, <code class=\"language-text\">useEffect()</code> se comporta de igual manera que <code class=\"language-text\">componentDidMount</code>.</p>\n<p>Para ilustrar esto, el siguiente ejemplo muestra un componente de clase que utiliza <code class=\"language-text\">componentDidMount</code> para actualizar su estado local <code class=\"language-text\">counter</code> y sin importar que se actualice otro segmento de estado, el <code class=\"language-text\">counter</code> solo se actualizará una sola vez.</p>\n<p><iframe width=\"1000\" height=\"500\" src=\"https://codesandbox.io/embed/componentdidmount-kltg9\" style=\"width:1000px; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></p>\n<p>Entonces como primer POC (Proof of Concept), voy a intentar replicar este mismo comportamiento utilizando hooks.</p>\n<p><iframe width=\"1000\" height=\"500\" src=\"https://codesandbox.io/embed/useeffect-y1oof\" style=\"width:1000px; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></p>\n<p>En el anterior CodeSandbox se utiliza <code class=\"language-text\">useEffect</code> para lograr replicar el comportamiento de <code class=\"language-text\">componentDidMount</code>. Ejecutando el ejemplo se puede ver que efectivamente el estado <code class=\"language-text\">counter</code> se actualiza una sola vez sin importar que se actualice el <code class=\"language-text\">flag</code> muchas veces. Explicando un poco esta implementación:</p>\n<ul>\n<li>En la linea 6 se ve que App es un <em>componente funcional</em> al que podemos añadir estado utilizando el hook <code class=\"language-text\">useState()</code>.</li>\n<li>\n<p>En las lineas 7 y 8 creamos dos estados locales tal cual como se hizo en el componente de clase, se inicializan sus valores.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> updateCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>flag<span class=\"token punctuation\">,</span> updateFlag<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>Entre las lineas 10 y 16 se crean dos “handlers” encargados de actualizar los estados. Que aunque no son necesarios, los puse para asemejar lo más posible con la implementación del componente de clase.</li>\n<li>\n<p>Entre las líneas 18 a 20 se encuentra lo más importante para el propósito de este post. La utilización de <code class=\"language-text\">useEffect</code> para “replicar” el comportamiento del <code class=\"language-text\">componentDidMount</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">updateCounterHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Más a detalle <code class=\"language-text\">useEffect</code> es una función que recibe al menos un parámetro, el primero es una función que (idealmente) ocasiona un cambio en el estado, en el ejemplo ésta es la función que en el cuerpo ejecuta el handler <code class=\"language-text\">updateCounterHandler()</code> que causa la actualización del estado <code class=\"language-text\">counter</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">updateCounterHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El siguiente parámetro de <code class=\"language-text\">useEffect</code> (que es opcional) es una lista (array) de dependencias que controlan cuando se va a ejecutar la función que se mandó como primer parámetro, en nuestro caso es un array vacío (<code class=\"language-text\">[]</code>) y es en este detalle donde ocurre la magia que hace que <code class=\"language-text\">useEffect</code> se comporte como el ya conocido <code class=\"language-text\">componentDidMount</code>.</p>\n</li>\n</ul>\n<p>Hasta ahi logramos la primera meta, hacer que <code class=\"language-text\">useEffect</code> se ejecute solo una vez cuando el componente se monta. Tal como está es ideal hacer peticiones HTTP, obtener información de un server y mostrar la información en el componente.</p>\n<h2 id=\"haciendo-una-simple-petición\"><a href=\"#haciendo-una-simple-petici%C3%B3n\" aria-label=\"haciendo una simple petición permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Haciendo una simple petición</h2>\n<p>La meta de esta sección es lograr hacer una petición GET a una API, obtener la respuesta y mostrar la información en el navegador. Todo usando Hooks!.</p>\n<p>Para lograr esto he creado un “Mock Server” utlizando <a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postman</a> de manera que tenga una API publica a la cual se pueda hacer los requests que se usarán de ahora en adelante. Postman provee una url y subdominios, y la opción de crear respuestas estáticas que serán el resultado de las peticiones. En este ejemplo la url es <a href=\"https://5024e627-be17-414d-a478-57f04073b8cd.mock.pstmn.io/the-beatles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://5024e627-be17-414d-a478-57f04073b8cd.mock.pstmn.io/the-beatles</a> y el primer endpoint es <code class=\"language-text\">/albums</code>, se puede probar esto con el siguiente comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl https://5024e627-be17-414d-a478-57f04073b8cd.mock.pstmn.io/the-beatles/albums</code></pre></div>\n<p>que retorna una lista de los primeros albums de The Beatles :3.</p>\n<p>Volviendo a React</p>","frontmatter":{"title":"Peticiones HTTP con React Hooks","date":"August 17, 2019","description":"Recetas para hacer peticiones HTTP utilizando el hook useEffect."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/peticiones-http-con-hooks/","previous":{"fields":{"slug":"/debian-buster-config-wifi/"},"frontmatter":{"title":"Configuración de WiFi en Debian Buster"}},"next":{"fields":{"slug":"/titulo temporal/"},"frontmatter":{"title":"Título temporal"}}}}}