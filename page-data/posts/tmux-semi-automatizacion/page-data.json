{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/posts/tmux-semi-automatizacion/",
    "result": {"data":{"mdx":{"slug":"tmux-semi-automatizacion/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Semi-automatización de TMUX\",\n  \"date\": \"2020-11-21\",\n  \"description\": \"Cómo semi-automatizar el inicio de sesión de TMUX con una configuración de específica de paneles y sus tareas con un solo comando!.\",\n  \"tags\": [\"consola\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Desde hace tiempo que uso \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tmux/tmux\"\n  }, \"TMUX\"), \" para hacer mas efectivo y fluido mi tiempo en la terminal.\"), mdx(\"p\", null, \"Como en el trabajo paso la mayor parte del tiempo desarrollando una app en React Native mi configuracion de TMUX luce siempre igual y los paneles los uso para los mismos prop\\xF3sitos. Mis sesiones se ven asi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \" ------------------------------\\n|      1       |               |\\n --------------|       3       |\\n|      2       |               |\\n ------------------------------\\n\")), mdx(\"p\", null, \"El panel 1 se mantiene est\\xE1tico corriendo el metro-bundler de la app.\"), mdx(\"p\", null, \"El panel 2 lo utilizo para ejecutar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx react-native run-{platform}\"), \" y para comandos git.\"), mdx(\"p\", null, \"El panel 3 tiene el emulador corriendo.\"), mdx(\"p\", null, \"Normalmente iniciaba tmux y manualmente constru\\xEDa los paneles e iniciaba las mismas tareas en cada panel, se hizo repetitivo hacerlo a diario.\"), mdx(\"p\", null, \"Investigando un poco descubr\\xED que puedo lograr la disposici\\xF3n de los paneles y las tareas de cada uno con un simple comando al momento de iniciar la sesi\\xF3n TMUX. Entonces esas son mis dos metas, lograr la estructura del layout e iniciar las tareas en cada panel.\"), mdx(\"h2\", null, \"Paneles en proceso...\"), mdx(\"p\", null, \"Para lograr el layout de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"manera manual\"), \" siempre sigo los siguientes pasos:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ tmux          # Inicia sesi\\xF3n TMUX\\nC-b %           # Divide la pantalla en 2 verticalmente\\nC-b q 1         # Regresa a la primera mitad\\nC-b \\\"           # Divide el primer panel en 2 horizontalmente\\n\")), mdx(\"p\", null, \"Para lograr el layout desde el momento que se inicia la sesi\\xF3n TMUX la sintaxis es diferente ya que en ese momento no se tiene acceso a los atajos de teclado como son \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C-b\"), \"y \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"M-x\"), \", pero tenemos comandos de tmux, necesitamos inicialmente dos (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"split-window\"), \" y \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select-pane\"), \"). Como prueba inicial tendremos:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ tmux new-session \\\\; \\\\\\nsplit-window -h\\n\\n# Resultado\\n ------------------------------\\n|              |               |\\n|      1       |       2       |\\n|              |               |\\n ------------------------------\\n\")), mdx(\"p\", null, \"El argumento \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-h\"), \" indica que la ventana se dividir\\xE1 en dos paneles de manera horizontal, el siguiente paso es dividir el Panel 1 en dos paneles verticalmente, por lo que complementando el comando es:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ tmux new-session \\\\; \\\\\\nsplit-window -h \\\\; \\\\\\nsplit-window -v \\\\;\\n\\n# Resultado\\n ------------------------------\\n|              |       2       |\\n|      1       |---------------|\\n|              |       3       |\\n ------------------------------\\n\")), mdx(\"p\", null, \"El resultado obtenido hasta el momento no es exactamente lo que busco, pero hay que tomar en cuenta la manera como TMUX funciona, una vez que se divide la pantalla en paneles TMUX escoge el panel activo:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cuando se divide horizontalmente el panel activo es el de la derecha\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cuando se divide verticalmente el panel activo es el de abajo.\")), mdx(\"p\", null, \"En este caso dado que ten\\xEDa dos paneles (1 y 2) separados horizontalmente, el siguiente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"split-window\"), \" dividir\\xE1 el panel 2. La soluci\\xF3n es seleccionar manualmente el panel 1 antes de dividirlo verticalmente usando el comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select-pane\"), \" como sigue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ tmux new-session \\\\; \\\\\\nsplit-window -h \\\\; \\\\\\nselect-pane -t 1 \\\\; \\\\\\nsplit-window -v \\\\;\\n\\n# Resultado\\n ------------------------------\\n|      1       |               |\\n --------------|       3       |\\n|      2       |               |\\n ------------------------------\\n\")), mdx(\"p\", null, \"\\uD83C\\uDF89\\uD83C\\uDF89\\uD83C\\uDF89 Listo!, el layout es como quiero...\"), mdx(\"h2\", null, \"Inicio de tareas en cada panel\"), mdx(\"p\", null, \"Ya que el layout est\\xE1 listo ahora queda iniciar las tareas en cada panel.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Panel 1 para iniciar el metro bundler\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Panel 2 para ejecutar \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npx react-native run-{platform}\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Panel 3 para ejecutar el emulador\")), mdx(\"p\", null, \"Para lograrlo se utiliza el comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send-keys\"), \" seguido de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C-m\"), \" que es un par\\xE1metro que ejecuta el comando. Cada que se cree un panel iniciaremos su tarea.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ tmux new-session \\\\; \\\\\\nsend-keys 'yarn && yarn start' C-m \\\\; \\\\\\nsplit-window -h \\\\; \\\\\\nsend-keys 'androidemu @Pixel3a' C-m \\\\; \\\\\\nselect-pane -t 1 \\\\; \\\\\\nsplit-window -v \\\\; \\\\\\nsend-keys 'npx react-native run-android' C-m \\\\;\\n\")), mdx(\"p\", null, \"\\uD83C\\uDF89\\uD83C\\uDF89\\uD83C\\uDF89 Listo! a\\xF1adiendo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send-keys\"), \" cuando se crea cada panel se inicia la tarea de cada uno. Ahora cada vez que quiero iniciar TMUX para trabajar en la app de react-native solo tengo que copiar y pegar ese ultimo comando en una terminal que este en el directorio raiz del proyecto.\"), mdx(\"h2\", null, \"Mejoras\"), mdx(\"p\", null, \"Hay un par de detalles que se pueden mejorar, la primera es que tengo que cambiar de directorio a la raiz del proyecto antes de copiar y pegar el comando de TMUX, eso se puede mejorar!. El comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new-session\"), \" tiene disponible la bandera \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-c\"), \" con la que se puede especificar el directorio en el cual se inicia la sesi\\xF3n de TMUX, aplicando esto tenemos:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ tmux new-session -c /path/to/react-native-project \\\\; \\\\\\nsend-keys 'yarn && yarn start' C-m \\\\; \\\\\\nsplit-window -h \\\\; \\\\\\nsend-keys 'androidemu @Pixel3a' C-m \\\\; \\\\\\nselect-pane -t 1 \\\\; \\\\\\nsplit-window -v \\\\; \\\\\\nsend-keys 'npx react-native run-android' C-m \\\\;\\n\")), mdx(\"p\", null, \"Con el uso de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-c\"), \" se ahorra el paso de tener que estar en la raiz del proyecto antes de copiar y pegar el comando de TMUX. Desde cualquier directorio en el que est\\xE9 la terminal la sesi\\xF3n de TMUX iniciar\\xE1 en el proyecto deseado.\"), mdx(\"p\", null, \"La ultima mejora es darle un nombre a la sesi\\xF3n, la bandera \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-n\"), \" de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new-session\"), \" hace justo esto:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ tmux new-session -n tmux-rules -c /path/to/react-native-project \\\\; \\\\\\nsend-keys 'yarn && yarn start' C-m \\\\; \\\\\\nsplit-window -h \\\\; \\\\\\nsend-keys 'androidemu @Pixel3a' C-m \\\\; \\\\\\nselect-pane -t 1 \\\\; \\\\\\nsplit-window -v \\\\; \\\\\\nsend-keys 'npx react-native run-android' C-m \\\\;\\n\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MISI\\xD3N CUMPLIDA\")), mdx(\"p\", null, \"Este \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.github.com/Veuge/4d460396bc459bf23093318f34a8186f\"\n  }, \"gist\"), \" tiene el resultado final\"), mdx(\"h2\", null, \"Referencias\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/tmux/tmux/wiki/Getting-Started\"\n  }, \"TMUX Wiki\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://man7.org/linux/man-pages/man1/tmux.1.html\"\n  }, \"TMUX Man Page\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/questions/5609192/how-to-set-up-tmux-so-that-it-starts-up-with-specified-windows-opened\"\n  }, \"Este hilo de StackOverflow\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"6 noviembre 2020","title":"Semi-automatización de TMUX","description":"Cómo semi-automatizar el inicio de sesión de TMUX con una configuración de específica de paneles y sus tareas con un solo comando!.","tags":["consola"]}}},"pageContext":{"slug":"tmux-semi-automatizacion/"}},
    "staticQueryHashes": ["3665178171"]}