{"data":{"site":{"siteMetadata":{"title":"Este es un Hotfix!","author":"Veronica Clavijo"}},"markdownRemark":{"id":"b691e62f-18d6-54d0-aad2-dc617599afb4","excerpt":"Lo nuevo de la versión 16.8 de React son los llamados \"Hooks\" que, entre otras cosas, permiten compartir logica entre componentes y principalmente añadir estado…","html":"<p>Lo nuevo de la versión <a href=\"https://es.reactjs.org/blog/2019/02/06/react-v16.8.0.html\">16.8 de React</a> son los llamados \"Hooks\" que, entre otras cosas, permiten compartir logica entre componentes y principalmente añadir estado local a componentes funcionales.</p>\n<p>Como estoy acostumbrada a los componentes de clase, a un inicio los hooks pueden resultar un poco confusos. La pregunta que quiero responder con este post es ¿cómo se hacen peticiones HTTP utilizando React Hooks?. Y en lo posible llegar a un enfoque que sea reutilizable para la mayoría de casos posibles. :)</p>\n<h2>Los multiples usos de <code>useEffect()</code></h2>\n<p>De acuerdo a la documentación de React, el hook <code>useEffect</code> puede ser utilizado en sustitución a todos los métodos de ciclo de vida de los componentes de clase (<code>componentDidMount</code>, <code>componentDidUpdate</code>, etc). Esto es porque de acuerdo al diseño de este hook, pasando diferentes parametros o solo uno, o retornando o no una función se puede \"simular\" el comportamiento de los metodos de ciclo de vida ya mencionados.</p>\n<p>Esa es la primera pista, normalmente en componentes de clase el método en el que se realizan las peticiones HTTP es <code>componentDidMount</code>, de esta manera la petición se ejecuta solo una vez cuando el componente se monta por primera vez. <a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">Ver detalles del ciclo de vida aqui</a>.</p>\n<h3><code>useEffect()</code> tomando el lugar de <code>componentDidMount()</code></h3>\n<p>Ya he mencionado que, pasando ciertos parámetros, <code>useEffect()</code> se comporta de igual manera que <code>componentDidMount</code>.</p>\n<p>Para ilustrar esto, el siguiente ejemplo muestra un componente de clase que utiliza <code>componentDidMount</code> para actualizar su estado local <code>counter</code> y sin importar que se actualice otro segmento de estado, el <code>counter</code> solo se actualizará una sola vez.</p>\n<p><a href=\"https://codesandbox.io/embed/componentdidmount-kltg9?fontsize=14&#x26;hidenavigation=1\"><iframe src=\"https://codesandbox.io/embed/componentdidmount-kltg9?fontsize=14&hidenavigation=1\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></a></p>\n<p>Entonces como primer POC (Proof of Concept), voy a intentar replicar este mismo comportamiento utilizando hooks.</p>\n<p><a href=\"https://codesandbox.io/embed/restless-sky-y1oof?fontsize=14&#x26;hidenavigation=1\"><iframe src=\"https://codesandbox.io/embed/restless-sky-y1oof?fontsize=14&hidenavigation=1\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe></a></p>\n<p>En el anterior CodeSandbox se utiliza <code>useEffect</code> para lograr replicar el comportamiento de <code>componentDidMount</code>. Ejecutando el ejemplo se puede ver que efectivamente el estado <code>counter</code> se actualiza una sola vez sin importar que se actualice el <code>flag</code> muchas veces. Explicando un poco esta implementación:</p>\n<ul>\n<li>En la linea 6 se ve que App es un <em>componente funcional</em> al que podemos añadir estado utilizando el hook <code>useState()</code>.</li>\n<li>\n<p>En las lineas 7 y 8 creamos dos estados locales tal cual como se hizo en el componente de clase, se inicializan sus valores.</p>\n<pre><code>const [counter, updateCounter] = useState(0);\nconst [flag, updateFlag] = useState(false);\n</code></pre>\n</li>\n<li>Entre las lineas 10 y 16 se crean dos \"handlers\" encargados de actualizar los estados. Que aunque no son necesarios, los puse para asemejar lo más posible con la implementación del componente de clase.</li>\n<li>\n<p>Entre las líneas 18 a 20 se encuentra lo más importante para el propósito de este post. La utilización de <code>useEffect</code> para \"replicar\" el comportamiento del <code>componentDidMount</code>.</p>\n<pre><code>useEffect(() => {\nupdateCounterHandler();\n}, []);\n</code></pre>\n<p>Más a detalle <code>useEffect</code> es una función que recibe al menos un parámetro, el primero es una función que ocasiona un cambio en el estado, en este caso función que en el cuerpo ejecuta la <code>updateCounterHandler()</code> que ya vimos que es un \"handler\" que causa la actualización del estado <code>counter</code>:</p>\n<pre><code>() => {\nupdateCounterHandler();\n}\n</code></pre>\n<p>El siguiente parámetro (que es opcional) de <code>useEffect</code> es una lista (array) de dependencias que controlan cuando se va a ejecutar la función </p>\n</li>\n</ul>","frontmatter":{"title":"Peticiones HTTP con React Hooks","date":"August 17, 2019","description":"Recetas para hacer peticiones HTTP utilizando el hook useEffect."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/17-08-2019-peticiones-http-con-hooks/","previous":{"fields":{"slug":"/18-07-2019-debian-buster-config-wifi/"},"frontmatter":{"title":"Configuración de WiFi en Debian Buster"}},"next":{"fields":{"slug":"/30-08-2019-titulo temporal/"},"frontmatter":{"title":"Título temporal"}}}}