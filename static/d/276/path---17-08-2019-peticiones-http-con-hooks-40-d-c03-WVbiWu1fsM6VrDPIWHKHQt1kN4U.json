{"data":{"site":{"siteMetadata":{"title":"Este es un Hotfix!","author":"Veronica Clavijo"}},"markdownRemark":{"id":"b691e62f-18d6-54d0-aad2-dc617599afb4","excerpt":"Lo nuevo de la versión 16.8 de React son los llamados “Hooks” que, entre otras cosas, permiten compartir logica entre componentes y principalmente añadir estado…","html":"<p>Lo nuevo de la versión <a href=\"https://es.reactjs.org/blog/2019/02/06/react-v16.8.0.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">16.8 de React</a> son los llamados “Hooks” que, entre otras cosas, permiten compartir logica entre componentes y principalmente añadir estado local a componentes funcionales.</p>\n<p>Como estoy acostumbrada a los componentes de clase, a un inicio los hooks pueden resultar un poco confusos. La pregunta que quiero responder con este post es ¿cómo se hacen peticiones HTTP utilizando React Hooks?. Y en lo posible llegar a un enfoque que sea reutilizable para la mayor de casos posibles. :)</p>\n<h2 id=\"los-multiples-usos-de-useeffect\"><a href=\"#los-multiples-usos-de-useeffect\" aria-label=\"los multiples usos de useeffect permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Los multiples usos de <code class=\"language-text\">useEffect()</code></h2>\n<p>De acuerdo a la documentación de React, el hook <code class=\"language-text\">useEffect</code> puede ser utilizado en sustitución a todos los métodos de ciclo de vida de los componentes de clase (<code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code>, etc). Esto es porque de acuerdo al diseño de este hook, pasando diferentes parametros o solo uno, o retornando o no una función se puede “simular” el comportamiento de los metodos de ciclo de vida ya mencionados.</p>\n<p>Esa es la primera pista, normalmente en componentes de clase el método en el que se realizan las peticiones HTTP es <code class=\"language-text\">componentDidMount</code>, de esta manera la petición se ejecuta solo una vez cuando el componente se monta por primera vez. <a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ver detalles del ciclo de vida aqui</a>.</p>\n<h3 id=\"useeffect-tomando-el-lugar-de-componentdidmount\"><a href=\"#useeffect-tomando-el-lugar-de-componentdidmount\" aria-label=\"useeffect tomando el lugar de componentdidmount permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">useEffect()</code> tomando el lugar de <code class=\"language-text\">componentDidMount()</code></h3>\n<p>Ya he mencionado que, pasando ciertos parámetros </p>","frontmatter":{"title":"Peticiones HTTP con React Hooks","date":"August 17, 2019","description":"Recetas para hacer peticiones HTTP utilizando el hook useEffect."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/17-08-2019-peticiones-http-con-hooks/","previous":{"fields":{"slug":"/18-07-2019-debian-buster-config-wifi/"},"frontmatter":{"title":"Configuración de WiFi en Debian Buster"}},"next":{"fields":{"slug":"/30-08-2019-titulo temporal/"},"frontmatter":{"title":"Título temporal"}}}}